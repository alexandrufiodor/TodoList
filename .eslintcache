[{"C:\\React\\NewTodolist\\src\\stories\\Page.stories.tsx":"1","C:\\React\\NewTodolist\\src\\stories\\Button.tsx":"2","C:\\React\\NewTodolist\\src\\stories\\decorators\\ReduxStoreProviderDecorator.tsx":"3","C:\\React\\NewTodolist\\src\\stories\\todolists-api.stories.tsx":"4","C:\\React\\NewTodolist\\src\\stories\\Button.stories.tsx":"5","C:\\React\\NewTodolist\\src\\stories\\Page.tsx":"6","C:\\React\\NewTodolist\\src\\api\\todolists-api.ts":"7","C:\\React\\NewTodolist\\src\\reportWebVitals.ts":"8","C:\\React\\NewTodolist\\src\\index.tsx":"9","C:\\React\\NewTodolist\\src\\stories\\Header.stories.tsx":"10","C:\\React\\NewTodolist\\src\\app\\App.tsx":"11","C:\\React\\NewTodolist\\src\\features\\TodolistList\\todolists-reducer.ts":"12","C:\\React\\NewTodolist\\src\\features\\TodolistList\\tasks-reducer.ts":"13","C:\\React\\NewTodolist\\src\\components\\AddItemForm\\AddItemForm.tsx":"14","C:\\React\\NewTodolist\\src\\app\\store.ts":"15","C:\\React\\NewTodolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"16","C:\\React\\NewTodolist\\src\\app\\app-reducer.ts":"17","C:\\React\\NewTodolist\\src\\features\\TodolistList\\Todolist\\Todolist.tsx":"18","C:\\React\\NewTodolist\\src\\components\\EditableSpan\\EditableSpan.tsx":"19","C:\\React\\NewTodolist\\src\\features\\TodolistList\\Todolist\\Task\\Task.tsx":"20","C:\\React\\NewTodolist\\src\\features\\TodolistList\\TodolistsList.tsx":"21","C:\\React\\NewTodolist\\src\\features\\Login\\Login.tsx":"22","C:\\React\\NewTodolist\\src\\features\\Login\\auth-reducer.ts":"23","C:\\React\\NewTodolist\\src\\utils\\error-utils.ts":"24"},{"size":509,"mtime":1621113097000,"results":"25","hashOfConfig":"26"},{"size":941,"mtime":1621113097000,"results":"27","hashOfConfig":"26"},{"size":1139,"mtime":1621113097000,"results":"28","hashOfConfig":"26"},{"size":9127,"mtime":1621511510876,"results":"29","hashOfConfig":"26"},{"size":708,"mtime":1621113097000,"results":"30","hashOfConfig":"26"},{"size":2424,"mtime":1621113097000,"results":"31","hashOfConfig":"26"},{"size":3137,"mtime":1625493971200,"results":"32","hashOfConfig":"26"},{"size":425,"mtime":1607869388000,"results":"33","hashOfConfig":"26"},{"size":643,"mtime":1623432157417,"results":"34","hashOfConfig":"26"},{"size":414,"mtime":1621113097000,"results":"35","hashOfConfig":"26"},{"size":2762,"mtime":1624575739812,"results":"36","hashOfConfig":"26"},{"size":4723,"mtime":1624896234375,"results":"37","hashOfConfig":"26"},{"size":6693,"mtime":1625493799121,"results":"38","hashOfConfig":"26"},{"size":1460,"mtime":1624201636715,"results":"39","hashOfConfig":"26"},{"size":1079,"mtime":1624879184684,"results":"40","hashOfConfig":"26"},{"size":1078,"mtime":1624887503767,"results":"41","hashOfConfig":"26"},{"size":3026,"mtime":1624888370605,"results":"42","hashOfConfig":"26"},{"size":4070,"mtime":1624894871691,"results":"43","hashOfConfig":"26"},{"size":960,"mtime":1624309425653,"results":"44","hashOfConfig":"26"},{"size":1773,"mtime":1623432209066,"results":"45","hashOfConfig":"26"},{"size":4081,"mtime":1624893876169,"results":"46","hashOfConfig":"26"},{"size":4192,"mtime":1624573596687,"results":"47","hashOfConfig":"26"},{"size":2412,"mtime":1624888380646,"results":"48","hashOfConfig":"26"},{"size":748,"mtime":1624887477073,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"x32fdu",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"104"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\React\\NewTodolist\\src\\stories\\Page.stories.tsx",[],["112","113"],"C:\\React\\NewTodolist\\src\\stories\\Button.tsx",[],["114","115"],"C:\\React\\NewTodolist\\src\\stories\\decorators\\ReduxStoreProviderDecorator.tsx",["116","117"],"import React from 'react'\nimport {Provider} from 'react-redux'\nimport {combineReducers, createStore} from 'redux'\nimport {v1} from 'uuid'\nimport {tasksReducer} from \"../../state/tasks-reducer\";\nimport {todolistsReducer} from \"../../state/todolists-reducer\";\nimport {AppRootState} from \"../../state/store\";\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n\nconst initialGlobalState = {\n    todolists: [\n        {id: \"todolistId1\", title: \"What to learn\", filter: \"all\"},\n        {id: \"todolistId2\", title: \"What to buy\", filter: \"all\"}\n    ] ,\n    tasks: {\n        [\"todolistId1\"]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true}\n        ],\n        [\"todolistId2\"]: [\n            {id: v1(), title: \"Milk\", isDone: true},\n            {id: v1(), title: \"React Book\", isDone: true}\n        ]\n    }\n};\n\nexport const storyBookStore = createStore(rootReducer, initialGlobalState as AppRootState);\n\nexport const ReduxStoreProviderDecorator = (storyFn: any) => (\n    <Provider\n        store={storyBookStore}>{storyFn()}\n    </Provider>)\n\n",["118","119"],"C:\\React\\NewTodolist\\src\\stories\\todolists-api.stories.tsx",["120","121"],"C:\\React\\NewTodolist\\src\\stories\\Button.stories.tsx",[],["122","123"],"C:\\React\\NewTodolist\\src\\stories\\Page.tsx",[],"C:\\React\\NewTodolist\\src\\api\\todolists-api.ts",[],"C:\\React\\NewTodolist\\src\\reportWebVitals.ts",[],["124","125"],"C:\\React\\NewTodolist\\src\\index.tsx",[],["126","127"],"C:\\React\\NewTodolist\\src\\stories\\Header.stories.tsx",[],"C:\\React\\NewTodolist\\src\\app\\App.tsx",["128","129","130","131"],"C:\\React\\NewTodolist\\src\\features\\TodolistList\\todolists-reducer.ts",[],"C:\\React\\NewTodolist\\src\\features\\TodolistList\\tasks-reducer.ts",["132"],"C:\\React\\NewTodolist\\src\\components\\AddItemForm\\AddItemForm.tsx",[],"C:\\React\\NewTodolist\\src\\app\\store.ts",["133","134"],"import {tasksReducer} from '../features/TodolistList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistList/todolists-reducer';\r\nimport { combineReducers } from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n});\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","C:\\React\\NewTodolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",["135"],"C:\\React\\NewTodolist\\src\\app\\app-reducer.ts",["136"],"C:\\React\\NewTodolist\\src\\features\\TodolistList\\Todolist\\Todolist.tsx",["137","138","139","140","141","142"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} disabled={props.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n",["143","144"],"C:\\React\\NewTodolist\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"C:\\React\\NewTodolist\\src\\features\\TodolistList\\Todolist\\Task\\Task.tsx",["145","146","147"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\React\\NewTodolist\\src\\features\\TodolistList\\TodolistsList.tsx",["148","149","150","151","152","153","154","155"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn ) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                entityStatus={tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n",["156","157"],"C:\\React\\NewTodolist\\src\\features\\Login\\Login.tsx",["158","159","160"],"import React, {useEffect} from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {initializeAppTC} from \"../../app/app-reducer\";\r\nimport {Redirect} from \"react-router\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length <= 2) {\r\n                errors.password = 'The password must be more than 2 characters';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            // alert(JSON.stringify(values))\r\n            dispatch(loginTC(values))\r\n        }\r\n    })\r\n\r\n\r\n\r\n    if (isLoggedIn ) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            // name = 'email'\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.email}\r\n                            // onBlur={formik.handleBlur}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                            // name = 'password'\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.password}\r\n                            // onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox onChange={formik.handleChange}\r\n                                               checked={formik.values.rememberMe}\r\n                                                name={'rememberMe'}/>}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","C:\\React\\NewTodolist\\src\\features\\Login\\auth-reducer.ts",["161"],"C:\\React\\NewTodolist\\src\\utils\\error-utils.ts",[],{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"162","replacedBy":"166"},{"ruleId":"164","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":19,"column":9,"nodeType":"170","messageId":"171","endLine":22,"endColumn":10,"fix":"172"},{"ruleId":"168","severity":1,"message":"173","line":23,"column":9,"nodeType":"170","messageId":"171","endLine":26,"endColumn":10,"fix":"174"},{"ruleId":"162","replacedBy":"175"},{"ruleId":"164","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":2,"column":23,"nodeType":"179","messageId":"180","endLine":2,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":4,"column":1,"nodeType":"183","endLine":6,"endColumn":2},{"ruleId":"162","replacedBy":"184"},{"ruleId":"164","replacedBy":"185"},{"ruleId":"162","replacedBy":"186"},{"ruleId":"164","replacedBy":"187"},{"ruleId":"162","replacedBy":"188"},{"ruleId":"164","replacedBy":"189"},{"ruleId":"177","severity":1,"message":"190","line":13,"column":15,"nodeType":"179","messageId":"180","endLine":13,"endColumn":21},{"ruleId":"177","severity":1,"message":"191","line":20,"column":24,"nodeType":"179","messageId":"180","endLine":20,"endColumn":31},{"ruleId":"192","severity":1,"message":"193","line":32,"column":8,"nodeType":"194","endLine":32,"endColumn":10,"suggestions":"195"},{"ruleId":"192","severity":1,"message":"196","line":35,"column":7,"nodeType":"194","endLine":35,"endColumn":9,"suggestions":"197"},{"ruleId":"177","severity":1,"message":"198","line":176,"column":6,"nodeType":"179","messageId":"180","endLine":176,"endColumn":17},{"ruleId":"177","severity":1,"message":"199","line":3,"column":9,"nodeType":"179","messageId":"180","endLine":3,"endColumn":24},{"ruleId":"177","severity":1,"message":"200","line":3,"column":43,"nodeType":"179","messageId":"180","endLine":3,"endColumn":54},{"ruleId":"177","severity":1,"message":"201","line":1,"column":32,"nodeType":"179","messageId":"180","endLine":1,"endColumn":40},{"ruleId":"177","severity":1,"message":"202","line":3,"column":31,"nodeType":"179","messageId":"180","endLine":3,"endColumn":55},{"ruleId":"192","severity":1,"message":"203","line":37,"column":8,"nodeType":"194","endLine":37,"endColumn":10,"suggestions":"204"},{"ruleId":"192","severity":1,"message":"205","line":41,"column":8,"nodeType":"194","endLine":41,"endColumn":33,"suggestions":"206"},{"ruleId":"192","severity":1,"message":"205","line":48,"column":8,"nodeType":"194","endLine":48,"endColumn":45,"suggestions":"207"},{"ruleId":"192","severity":1,"message":"205","line":50,"column":86,"nodeType":"194","endLine":50,"endColumn":116,"suggestions":"208"},{"ruleId":"192","severity":1,"message":"205","line":51,"column":92,"nodeType":"194","endLine":51,"endColumn":122,"suggestions":"209"},{"ruleId":"192","severity":1,"message":"205","line":52,"column":98,"nodeType":"194","endLine":52,"endColumn":128,"suggestions":"210"},{"ruleId":"162","replacedBy":"211"},{"ruleId":"164","replacedBy":"212"},{"ruleId":"192","severity":1,"message":"205","line":15,"column":97,"nodeType":"194","endLine":15,"endColumn":130,"suggestions":"213"},{"ruleId":"192","severity":1,"message":"205","line":20,"column":8,"nodeType":"194","endLine":20,"endColumn":41,"suggestions":"214"},{"ruleId":"192","severity":1,"message":"205","line":24,"column":8,"nodeType":"194","endLine":24,"endColumn":41,"suggestions":"215"},{"ruleId":"192","severity":1,"message":"216","line":33,"column":8,"nodeType":"194","endLine":33,"endColumn":10,"suggestions":"217"},{"ruleId":"192","severity":1,"message":"196","line":38,"column":8,"nodeType":"194","endLine":38,"endColumn":10,"suggestions":"218"},{"ruleId":"192","severity":1,"message":"196","line":43,"column":8,"nodeType":"194","endLine":43,"endColumn":10,"suggestions":"219"},{"ruleId":"192","severity":1,"message":"196","line":48,"column":8,"nodeType":"194","endLine":48,"endColumn":10,"suggestions":"220"},{"ruleId":"192","severity":1,"message":"196","line":53,"column":8,"nodeType":"194","endLine":53,"endColumn":10,"suggestions":"221"},{"ruleId":"192","severity":1,"message":"196","line":58,"column":8,"nodeType":"194","endLine":58,"endColumn":10,"suggestions":"222"},{"ruleId":"192","severity":1,"message":"196","line":63,"column":8,"nodeType":"194","endLine":63,"endColumn":10,"suggestions":"223"},{"ruleId":"192","severity":1,"message":"196","line":68,"column":8,"nodeType":"194","endLine":68,"endColumn":10,"suggestions":"224"},{"ruleId":"162","replacedBy":"225"},{"ruleId":"164","replacedBy":"226"},{"ruleId":"177","severity":1,"message":"227","line":1,"column":16,"nodeType":"179","messageId":"180","endLine":1,"endColumn":25},{"ruleId":"177","severity":1,"message":"228","line":7,"column":9,"nodeType":"179","messageId":"180","endLine":7,"endColumn":24},{"ruleId":"229","severity":1,"message":"230","line":64,"column":32,"nodeType":"231","endLine":64,"endColumn":49},{"ruleId":"177","severity":1,"message":"232","line":11,"column":6,"nodeType":"179","messageId":"180","endLine":11,"endColumn":22},"no-native-reassign",["233"],"no-negated-in-lhs",["234"],["233"],["234"],"no-useless-computed-key","Unnecessarily computed property [\"todolistId1\"] found.","Property","unnecessarilyComputedProperty",{"range":"235","text":"236"},"Unnecessarily computed property [\"todolistId2\"] found.",{"range":"237","text":"238"},["233"],["234"],"@typescript-eslint/no-unused-vars","'TodolistType' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["233"],["234"],["233"],["234"],["233"],["234"],"'Router' is defined but never used.","'NavLink' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["239"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["240"],"'ActionsType' is defined but never used.","'applyMiddleware' is defined but never used.","'createStore' is defined but never used.","'useState' is defined but never used.","'handleServerNetworkError' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["241"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["242"],["243"],["244"],["245"],["246"],["233"],["234"],["247"],["248"],["249"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isLoggedIn'. Either include them or remove the dependency array.",["250"],["251"],["252"],["253"],["254"],["255"],["256"],["257"],["233"],["234"],"'useEffect' is defined but never used.","'initializeAppTC' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'InitialStateType' is defined but never used.","no-global-assign","no-unsafe-negation",[613,628],"\"todolistId1\"",[758,773],"\"todolistId2\"",{"desc":"258","fix":"259"},{"desc":"258","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"263","fix":"265"},{"desc":"263","fix":"266"},{"desc":"263","fix":"267"},{"desc":"263","fix":"268"},{"desc":"263","fix":"269"},{"desc":"263","fix":"270"},{"desc":"263","fix":"271"},{"desc":"272","fix":"273"},{"desc":"258","fix":"274"},{"desc":"258","fix":"275"},{"desc":"258","fix":"276"},{"desc":"258","fix":"277"},{"desc":"258","fix":"278"},{"desc":"258","fix":"279"},{"desc":"258","fix":"280"},"Update the dependencies array to be: [dispatch]",{"range":"281","text":"282"},{"range":"283","text":"282"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"284","text":"285"},"Update the dependencies array to be: [props]",{"range":"286","text":"287"},{"range":"288","text":"287"},{"range":"289","text":"287"},{"range":"290","text":"287"},{"range":"291","text":"287"},{"range":"292","text":"287"},{"range":"293","text":"287"},{"range":"294","text":"287"},"Update the dependencies array to be: [dispatch, isLoggedIn]",{"range":"295","text":"296"},{"range":"297","text":"282"},{"range":"298","text":"282"},{"range":"299","text":"282"},{"range":"300","text":"282"},{"range":"301","text":"282"},{"range":"302","text":"282"},{"range":"303","text":"282"},[1212,1214],"[dispatch]",[1300,1302],[1477,1479],"[dispatch, props.id]",[1585,1610],"[props]",[1823,1860],[1950,1980],[2074,2104],[2204,2234],[765,798],[1071,1104],[1261,1294],[1245,1247],"[dispatch, isLoggedIn]",[1416,1418],[1587,1589],[1792,1794],[2005,2007],[2220,2222],[2367,2369],[2546,2548]]