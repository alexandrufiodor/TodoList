[{"C:\\React\\NewTodolist\\src\\stories\\Page.stories.tsx":"1","C:\\React\\NewTodolist\\src\\stories\\Button.tsx":"2","C:\\React\\NewTodolist\\src\\stories\\decorators\\ReduxStoreProviderDecorator.tsx":"3","C:\\React\\NewTodolist\\src\\stories\\todolists-api.stories.tsx":"4","C:\\React\\NewTodolist\\src\\stories\\Button.stories.tsx":"5","C:\\React\\NewTodolist\\src\\stories\\Page.tsx":"6","C:\\React\\NewTodolist\\src\\api\\todolists-api.ts":"7","C:\\React\\NewTodolist\\src\\reportWebVitals.ts":"8","C:\\React\\NewTodolist\\src\\index.tsx":"9","C:\\React\\NewTodolist\\src\\stories\\Header.stories.tsx":"10","C:\\React\\NewTodolist\\src\\app\\App.tsx":"11","C:\\React\\NewTodolist\\src\\features\\TodolistList\\todolists-reducer.ts":"12","C:\\React\\NewTodolist\\src\\features\\TodolistList\\tasks-reducer.ts":"13","C:\\React\\NewTodolist\\src\\components\\AddItemForm\\AddItemForm.tsx":"14","C:\\React\\NewTodolist\\src\\app\\store.ts":"15","C:\\React\\NewTodolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"16","C:\\React\\NewTodolist\\src\\app\\app-reducer.ts":"17","C:\\React\\NewTodolist\\src\\features\\TodolistList\\Todolist\\Todolist.tsx":"18","C:\\React\\NewTodolist\\src\\components\\EditableSpan\\EditableSpan.tsx":"19","C:\\React\\NewTodolist\\src\\features\\TodolistList\\Todolist\\Task\\Task.tsx":"20","C:\\React\\NewTodolist\\src\\features\\TodolistList\\TodolistsList.tsx":"21","C:\\React\\NewTodolist\\src\\features\\Login\\Login.tsx":"22","C:\\React\\NewTodolist\\src\\features\\Login\\auth-reducer.ts":"23"},{"size":509,"mtime":1621113097000,"results":"24","hashOfConfig":"25"},{"size":941,"mtime":1621113097000,"results":"26","hashOfConfig":"25"},{"size":1139,"mtime":1621113097000,"results":"27","hashOfConfig":"25"},{"size":9127,"mtime":1621511510876,"results":"28","hashOfConfig":"25"},{"size":708,"mtime":1621113097000,"results":"29","hashOfConfig":"25"},{"size":2424,"mtime":1621113097000,"results":"30","hashOfConfig":"25"},{"size":3138,"mtime":1624575515938,"results":"31","hashOfConfig":"25"},{"size":425,"mtime":1607869388000,"results":"32","hashOfConfig":"25"},{"size":643,"mtime":1623432157417,"results":"33","hashOfConfig":"25"},{"size":414,"mtime":1621113097000,"results":"34","hashOfConfig":"25"},{"size":2762,"mtime":1624575739812,"results":"35","hashOfConfig":"25"},{"size":5037,"mtime":1624304355056,"results":"36","hashOfConfig":"25"},{"size":5862,"mtime":1624309915469,"results":"37","hashOfConfig":"25"},{"size":1460,"mtime":1624201636715,"results":"38","hashOfConfig":"25"},{"size":1166,"mtime":1624570861980,"results":"39","hashOfConfig":"25"},{"size":1069,"mtime":1623476862653,"results":"40","hashOfConfig":"25"},{"size":2145,"mtime":1624575399828,"results":"41","hashOfConfig":"25"},{"size":4070,"mtime":1624309184582,"results":"42","hashOfConfig":"25"},{"size":960,"mtime":1624309425653,"results":"43","hashOfConfig":"25"},{"size":1773,"mtime":1623432209066,"results":"44","hashOfConfig":"25"},{"size":4068,"mtime":1624573580035,"results":"45","hashOfConfig":"25"},{"size":4192,"mtime":1624573596687,"results":"46","hashOfConfig":"25"},{"size":2091,"mtime":1624575788963,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"x32fdu",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"90"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\React\\NewTodolist\\src\\stories\\Page.stories.tsx",[],["107","108"],"C:\\React\\NewTodolist\\src\\stories\\Button.tsx",[],["109","110"],"C:\\React\\NewTodolist\\src\\stories\\decorators\\ReduxStoreProviderDecorator.tsx",["111","112"],"import React from 'react'\nimport {Provider} from 'react-redux'\nimport {combineReducers, createStore} from 'redux'\nimport {v1} from 'uuid'\nimport {tasksReducer} from \"../../state/tasks-reducer\";\nimport {todolistsReducer} from \"../../state/todolists-reducer\";\nimport {AppRootState} from \"../../state/store\";\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n\nconst initialGlobalState = {\n    todolists: [\n        {id: \"todolistId1\", title: \"What to learn\", filter: \"all\"},\n        {id: \"todolistId2\", title: \"What to buy\", filter: \"all\"}\n    ] ,\n    tasks: {\n        [\"todolistId1\"]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true}\n        ],\n        [\"todolistId2\"]: [\n            {id: v1(), title: \"Milk\", isDone: true},\n            {id: v1(), title: \"React Book\", isDone: true}\n        ]\n    }\n};\n\nexport const storyBookStore = createStore(rootReducer, initialGlobalState as AppRootState);\n\nexport const ReduxStoreProviderDecorator = (storyFn: any) => (\n    <Provider\n        store={storyBookStore}>{storyFn()}\n    </Provider>)\n\n",["113","114"],"C:\\React\\NewTodolist\\src\\stories\\todolists-api.stories.tsx",["115","116"],"C:\\React\\NewTodolist\\src\\stories\\Button.stories.tsx",[],["117","118"],"C:\\React\\NewTodolist\\src\\stories\\Page.tsx",[],"C:\\React\\NewTodolist\\src\\api\\todolists-api.ts",[],"C:\\React\\NewTodolist\\src\\reportWebVitals.ts",[],["119","120"],"C:\\React\\NewTodolist\\src\\index.tsx",[],["121","122"],"C:\\React\\NewTodolist\\src\\stories\\Header.stories.tsx",[],"C:\\React\\NewTodolist\\src\\app\\App.tsx",["123","124","125","126"],"C:\\React\\NewTodolist\\src\\features\\TodolistList\\todolists-reducer.ts",["127"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setErrorAC,\r\n    setErrorActionType,\r\n    setStatusAC,\r\n    setStatusActionType\r\n} from \"../../app/app-reducer\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({\r\n    type: 'SET-TODOLISTS',\r\n    todolists\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType | setStatusActionType | setErrorActionType>) => {\r\n        dispatch(setStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType | setStatusActionType | setErrorActionType>) => {\r\n        dispatch(setStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setStatusAC('succeeded'))\r\n\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n\r\n    return (dispatch: Dispatch<ActionsType | setStatusActionType | setErrorActionType>) => {\r\n        dispatch(setStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType | setStatusActionType | setErrorActionType>) => {\r\n        dispatch(setStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeTodolistEntityStatus = ReturnType<typeof changeTodolistEntityStatusAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ChangeTodolistEntityStatus\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","C:\\React\\NewTodolist\\src\\features\\TodolistList\\tasks-reducer.ts",["128"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setErrorAC, setErrorActionType, setStatusAC, setStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | setStatusActionType | setErrorActionType>) => {\r\n    dispatch(setStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType | setStatusActionType | setErrorActionType>) => {\r\n    dispatch(setStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | setErrorActionType | setStatusActionType>) => {\r\n    dispatch(setStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType | setErrorActionType | setStatusActionType>, getState: () => AppRootStateType) => {\r\n        dispatch(setStatusAC('loading'))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n","C:\\React\\NewTodolist\\src\\components\\AddItemForm\\AddItemForm.tsx",[],"C:\\React\\NewTodolist\\src\\app\\store.ts",["129"],"C:\\React\\NewTodolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",["130"],"import React, {SyntheticEvent, useState} from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport const ErrorSnackbars = () => {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setErrorAC(null))\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n",["131","132"],"C:\\React\\NewTodolist\\src\\app\\app-reducer.ts",["133"],"C:\\React\\NewTodolist\\src\\features\\TodolistList\\Todolist\\Todolist.tsx",["134","135","136","137","138","139"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} disabled={props.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","C:\\React\\NewTodolist\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"C:\\React\\NewTodolist\\src\\features\\TodolistList\\Todolist\\Task\\Task.tsx",["140","141","142"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\React\\NewTodolist\\src\\features\\TodolistList\\TodolistsList.tsx",["143","144","145","146","147","148","149","150"],"C:\\React\\NewTodolist\\src\\features\\Login\\Login.tsx",["151","152","153"],"C:\\React\\NewTodolist\\src\\features\\Login\\auth-reducer.ts",["154","155","156"],{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"157","replacedBy":"161"},{"ruleId":"159","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":19,"column":9,"nodeType":"165","messageId":"166","endLine":22,"endColumn":10,"fix":"167"},{"ruleId":"163","severity":1,"message":"168","line":23,"column":9,"nodeType":"165","messageId":"166","endLine":26,"endColumn":10,"fix":"169"},{"ruleId":"157","replacedBy":"170"},{"ruleId":"159","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":2,"column":23,"nodeType":"174","messageId":"175","endLine":2,"endColumn":35},{"ruleId":"176","severity":1,"message":"177","line":4,"column":1,"nodeType":"178","endLine":6,"endColumn":2},{"ruleId":"157","replacedBy":"179"},{"ruleId":"159","replacedBy":"180"},{"ruleId":"157","replacedBy":"181"},{"ruleId":"159","replacedBy":"182"},{"ruleId":"157","replacedBy":"183"},{"ruleId":"159","replacedBy":"184"},{"ruleId":"172","severity":1,"message":"185","line":13,"column":15,"nodeType":"174","messageId":"175","endLine":13,"endColumn":21},{"ruleId":"172","severity":1,"message":"186","line":20,"column":24,"nodeType":"174","messageId":"175","endLine":20,"endColumn":31},{"ruleId":"187","severity":1,"message":"188","line":32,"column":8,"nodeType":"189","endLine":32,"endColumn":10,"suggestions":"190"},{"ruleId":"187","severity":1,"message":"191","line":35,"column":7,"nodeType":"189","endLine":35,"endColumn":9,"suggestions":"192"},{"ruleId":"172","severity":1,"message":"193","line":5,"column":5,"nodeType":"174","messageId":"175","endLine":5,"endColumn":15},{"ruleId":"172","severity":1,"message":"193","line":5,"column":9,"nodeType":"174","messageId":"175","endLine":5,"endColumn":19},{"ruleId":"172","severity":1,"message":"194","line":6,"column":9,"nodeType":"174","messageId":"175","endLine":6,"endColumn":20},{"ruleId":"172","severity":1,"message":"195","line":1,"column":32,"nodeType":"174","messageId":"175","endLine":1,"endColumn":40},{"ruleId":"157","replacedBy":"196"},{"ruleId":"159","replacedBy":"197"},{"ruleId":"172","severity":1,"message":"198","line":3,"column":31,"nodeType":"174","messageId":"175","endLine":3,"endColumn":55},{"ruleId":"187","severity":1,"message":"199","line":37,"column":8,"nodeType":"189","endLine":37,"endColumn":10,"suggestions":"200"},{"ruleId":"187","severity":1,"message":"201","line":41,"column":8,"nodeType":"189","endLine":41,"endColumn":33,"suggestions":"202"},{"ruleId":"187","severity":1,"message":"201","line":48,"column":8,"nodeType":"189","endLine":48,"endColumn":45,"suggestions":"203"},{"ruleId":"187","severity":1,"message":"201","line":50,"column":86,"nodeType":"189","endLine":50,"endColumn":116,"suggestions":"204"},{"ruleId":"187","severity":1,"message":"201","line":51,"column":92,"nodeType":"189","endLine":51,"endColumn":122,"suggestions":"205"},{"ruleId":"187","severity":1,"message":"201","line":52,"column":98,"nodeType":"189","endLine":52,"endColumn":128,"suggestions":"206"},{"ruleId":"187","severity":1,"message":"201","line":15,"column":97,"nodeType":"189","endLine":15,"endColumn":130,"suggestions":"207"},{"ruleId":"187","severity":1,"message":"201","line":20,"column":8,"nodeType":"189","endLine":20,"endColumn":41,"suggestions":"208"},{"ruleId":"187","severity":1,"message":"201","line":24,"column":8,"nodeType":"189","endLine":24,"endColumn":41,"suggestions":"209"},{"ruleId":"187","severity":1,"message":"210","line":33,"column":8,"nodeType":"189","endLine":33,"endColumn":10,"suggestions":"211"},{"ruleId":"187","severity":1,"message":"191","line":38,"column":8,"nodeType":"189","endLine":38,"endColumn":10,"suggestions":"212"},{"ruleId":"187","severity":1,"message":"191","line":43,"column":8,"nodeType":"189","endLine":43,"endColumn":10,"suggestions":"213"},{"ruleId":"187","severity":1,"message":"191","line":48,"column":8,"nodeType":"189","endLine":48,"endColumn":10,"suggestions":"214"},{"ruleId":"187","severity":1,"message":"191","line":53,"column":8,"nodeType":"189","endLine":53,"endColumn":10,"suggestions":"215"},{"ruleId":"187","severity":1,"message":"191","line":58,"column":8,"nodeType":"189","endLine":58,"endColumn":10,"suggestions":"216"},{"ruleId":"187","severity":1,"message":"191","line":63,"column":8,"nodeType":"189","endLine":63,"endColumn":10,"suggestions":"217"},{"ruleId":"187","severity":1,"message":"191","line":68,"column":8,"nodeType":"189","endLine":68,"endColumn":10,"suggestions":"218"},{"ruleId":"172","severity":1,"message":"219","line":1,"column":16,"nodeType":"174","messageId":"175","endLine":1,"endColumn":25},{"ruleId":"172","severity":1,"message":"220","line":7,"column":9,"nodeType":"174","messageId":"175","endLine":7,"endColumn":24},{"ruleId":"221","severity":1,"message":"222","line":64,"column":32,"nodeType":"223","endLine":64,"endColumn":49},{"ruleId":"172","severity":1,"message":"224","line":3,"column":35,"nodeType":"174","messageId":"175","endLine":3,"endColumn":47},{"ruleId":"172","severity":1,"message":"225","line":5,"column":9,"nodeType":"174","messageId":"175","endLine":5,"endColumn":18},{"ruleId":"172","severity":1,"message":"226","line":5,"column":20,"nodeType":"174","messageId":"175","endLine":5,"endColumn":30},"no-native-reassign",["227"],"no-negated-in-lhs",["228"],["227"],["228"],"no-useless-computed-key","Unnecessarily computed property [\"todolistId1\"] found.","Property","unnecessarilyComputedProperty",{"range":"229","text":"230"},"Unnecessarily computed property [\"todolistId2\"] found.",{"range":"231","text":"232"},["227"],["228"],"@typescript-eslint/no-unused-vars","'TodolistType' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["227"],["228"],["227"],["228"],["227"],["228"],"'Router' is defined but never used.","'NavLink' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["233"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["234"],"'setErrorAC' is defined but never used.","'authReducer' is defined but never used.","'useState' is defined but never used.",["227"],["228"],"'handleServerNetworkError' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["235"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["236"],["237"],["238"],["239"],["240"],["241"],["242"],["243"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isLoggedIn'. Either include them or remove the dependency array.",["244"],["245"],["246"],["247"],["248"],["249"],["250"],["251"],"'useEffect' is defined but never used.","'initializeAppTC' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'todolistsAPI' is defined but never used.","'addTaskAC' is defined but never used.","'setTasksAC' is defined but never used.","no-global-assign","no-unsafe-negation",[613,628],"\"todolistId1\"",[758,773],"\"todolistId2\"",{"desc":"252","fix":"253"},{"desc":"252","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"257","fix":"259"},{"desc":"257","fix":"260"},{"desc":"257","fix":"261"},{"desc":"257","fix":"262"},{"desc":"257","fix":"263"},{"desc":"257","fix":"264"},{"desc":"257","fix":"265"},{"desc":"266","fix":"267"},{"desc":"252","fix":"268"},{"desc":"252","fix":"269"},{"desc":"252","fix":"270"},{"desc":"252","fix":"271"},{"desc":"252","fix":"272"},{"desc":"252","fix":"273"},{"desc":"252","fix":"274"},"Update the dependencies array to be: [dispatch]",{"range":"275","text":"276"},{"range":"277","text":"276"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"278","text":"279"},"Update the dependencies array to be: [props]",{"range":"280","text":"281"},{"range":"282","text":"281"},{"range":"283","text":"281"},{"range":"284","text":"281"},{"range":"285","text":"281"},{"range":"286","text":"281"},{"range":"287","text":"281"},{"range":"288","text":"281"},"Update the dependencies array to be: [dispatch, isLoggedIn]",{"range":"289","text":"290"},{"range":"291","text":"276"},{"range":"292","text":"276"},{"range":"293","text":"276"},{"range":"294","text":"276"},{"range":"295","text":"276"},{"range":"296","text":"276"},{"range":"297","text":"276"},[1212,1214],"[dispatch]",[1300,1302],[1477,1479],"[dispatch, props.id]",[1585,1610],"[props]",[1823,1860],[1950,1980],[2074,2104],[2204,2234],[765,798],[1071,1104],[1261,1294],[1246,1248],"[dispatch, isLoggedIn]",[1417,1419],[1588,1590],[1793,1795],[2006,2008],[2207,2209],[2354,2356],[2533,2535]]