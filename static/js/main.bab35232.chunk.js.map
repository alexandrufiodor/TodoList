{"version":3,"sources":["api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistList/todolists-reducer.ts","features/TodolistList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistList/Todolist/Task/Task.tsx","features/TodolistList/Todolist/Todolist.tsx","features/TodolistList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setErrorAC","error","setStatusAC","status","handleServerNetworkError","message","authSlice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","appSlice","isInitialized","setIsInitializedAC","appReducer","todolistsSlice","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","setTodolistsAC","todolists","map","changeTodolistEntityStatusAC","todolistsReducer","tasksSlice","removeTaskAC","tasks","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","t","apiModel","deadline","description","priority","startDate","then","res","catch","console","warn","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","disabled","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","log","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","removeTaskTC","resultCode","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbars","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","handleChange","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bab35232.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '367b5061-81a8-4346-a38b-61dffe8fe508'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: boolean\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{ userId?: number}>>('/auth/login', data);\r\n        return promise;\r\n    },\r\n    me() {\r\n        const promise = instance.get<ResponseType<{id: number, email: string, login: string}>>('/auth/me');\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>(`/auth/login`);\r\n        return promise;\r\n    }\r\n}","import { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolists-api';\r\nimport {setErrorAC, setStatusAC} from '../app/app-reducer';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setErrorAC({error: error.message}))\r\n    dispatch(setStatusAC({status: 'failed'}))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch","import { Dispatch } from 'redux'\r\nimport {setStatusAC} from \"../../app/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC: (state, action: PayloadAction<{value:boolean}>) => {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = authSlice.reducer\r\nexport const {setIsLoggedInAC} = authSlice.actions\r\n\r\n// export const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'login/SET-IS-LOGGED-IN':\r\n//             return {...state, isLoggedIn: action.value}\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// // actions\r\n// export const setIsLoggedInAC = (value: boolean) =>\r\n//     ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n// types\r\n// type ActionsType = ReturnType<typeof setIsLoggedInAC> | setStatusActionType | setErrorActionType","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nconst InitialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nconst appSlice = createSlice({\r\n    name: 'app',\r\n    initialState: InitialState,\r\n    reducers: {\r\n        setErrorAC: (state, action: PayloadAction<{error: string | null}>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitializedAC: (state, action: PayloadAction<{isInitialized: boolean}>) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n        setStatusAC: (state, action: PayloadAction<{status: RequestStatusType}>) => {\r\n            state.status = action.payload.status\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = appSlice.reducer\r\nexport const {setErrorAC, setIsInitializedAC, setStatusAC} = appSlice.actions\r\n\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC({status: 'loading'}))\r\n    authAPI.me()\r\n        .then((res) => {\r\n\r\n            if (res.data.resultCode === 0) {\r\n                const action = setIsLoggedInAC({value: true})\r\n                dispatch(action)\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(setIsInitializedAC({isInitialized: true}))\r\n        })\r\n}\r\n\r\n// export const appReducer = (state: InitialStateType = InitialState, action: ActionsType): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'APP/SET-STATUS':\r\n//             return {...state, status: action.status}\r\n//         case 'APP/SET-ERROR':\r\n//             return {...state, error: action.error}\r\n//         case 'APP/SET-INITIALIZED':\r\n//             return {...state, isInitialized: action.isInitialized}\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// export const setErrorAC = (error: string | null) => ({\r\n//     type: 'APP/SET-ERROR', error: error\r\n// } as const)\r\n// export const setIsInitializedAC  = (isInitialized: boolean) => ({\r\n//     type: 'APP/SET-INITIALIZED', isInitialized: isInitialized\r\n// } as const)\r\n//\r\n// export const setStatusAC = (status: RequestStatusType) => ({\r\n//     type: 'APP/SET-STATUS', status: status\r\n// } as const)\r\n\r\n\r\n\r\n// export type setErrorActionType = ReturnType<typeof setErrorAC>\r\n// export type setStatusActionType = ReturnType<typeof setStatusAC>\r\n// export type setIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\n// export type ActionsType = setErrorActionType | setStatusActionType | setIsInitializedActionType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setStatusAC\r\n} from \"../../app/app-reducer\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst todolistsSlice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC: (state, action: PayloadAction<{ id: string }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC: (state, action: PayloadAction<{ todolist: TodolistType }>) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: \"idle\"})\r\n        },\r\n        changeTodolistTitleAC: (state, action: PayloadAction<{ id: string, title: string }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC: (state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        setTodolistsAC: (state, action: PayloadAction<{ todolists: Array<TodolistType> }>) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n        changeTodolistEntityStatusAC: (state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const todolistsReducer = todolistsSlice.reducer\r\nexport const {removeTodolistAC, addTodolistAC, changeTodolistTitleAC, changeTodolistFilterAC, setTodolistsAC, changeTodolistEntityStatusAC} = todolistsSlice.actions\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                dispatch(setStatusAC({status: 'succeeded'}))\r\n\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC({status: 'loading'}))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n                dispatch(setStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeTodolistEntityStatus = ReturnType<typeof changeTodolistEntityStatusAC>;\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    addTodolistAC, AddTodolistActionType, removeTodolistAC, RemoveTodolistActionType,\r\n    setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { setStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC: (state, action: PayloadAction<{ taskId: string, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC: (state, action: PayloadAction<{ task: TaskType }>) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index =  tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n\r\n            if (index > -1) {\r\n                tasks[index] ={...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC: (state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) => {\r\n            state[action.payload.todolistId] = action.payload.tasks        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        .addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n            .addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl:any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\nexport const tasksReducer = tasksSlice.reducer\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC } = tasksSlice.actions\r\n\r\n// export const tasksReducer = (state: TasksStateType = initialState, action: any): TasksStateType => {\r\n//     switch (action.type) {\r\n//\r\n//         case addTodolistAC.type:\r\n//             return {...state, [action.payload.todolist.id]: []}\r\n//         case removeTodolistAC.type:\r\n//             const copyState = {...state}\r\n//             delete copyState[action.payload.id]\r\n//             return copyState\r\n//         case setTodolistsAC.type: {\r\n//             const copyState = {...state}\r\n//             action.payload.todolists.forEach((tl:any) => {\r\n//                 copyState[tl.id] = []\r\n//             })\r\n//             return copyState\r\n//         }\r\n//\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC({tasks: tasks, todolistId: todolistId})\r\n            dispatch(action)\r\n            dispatch(setStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC({status: 'loading'}))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId: taskId, todolistId: todolistId})\r\n            dispatch(action)\r\n            dispatch(setStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task: task})\r\n                dispatch(action)\r\n                dispatch(setStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setStatusAC({status: 'loading'}))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC({taskId: taskId, model: domainModel, todolistId: todolistId})\r\n                dispatch(action)\r\n                dispatch(setStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport { IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} disabled={props.disabled}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} disabled={props.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn ) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                entityStatus={tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, {SyntheticEvent, useState} from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport const ErrorSnackbars = () => {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setErrorAC({error: null}))\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {initializeAppTC} from \"../../app/app-reducer\";\r\nimport {Redirect} from \"react-router\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length <= 2) {\r\n                errors.password = 'The password must be more than 2 characters';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            // alert(JSON.stringify(values))\r\n            dispatch(loginTC(values))\r\n        }\r\n    })\r\n\r\n\r\n\r\n    if (isLoggedIn ) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            // name = 'email'\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.email}\r\n                            // onBlur={formik.handleBlur}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                            // name = 'password'\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.password}\r\n                            // onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox onChange={formik.handleChange}\r\n                                               checked={formik.values.rememberMe}\r\n                                                name={'rememberMe'}/>}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu, Router} from '@material-ui/icons'\r\nimport {TodolistsList} from \"../features/TodolistList/TodolistsList\";\r\nimport {ErrorSnackbars} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {BrowserRouter, NavLink, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch();\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    },[])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbars/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {\r\n                        isLoggedIn &&  <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>\r\n                    }\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n            <Container fixed>\r\n                {/*<TodolistsList/>*/}\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                        <Route exact path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </BrowserRouter>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from '../features/TodolistList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistList/todolists-reducer';\r\nimport { combineReducers } from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n});\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}