{"version":3,"sources":["api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","taskTitile","model","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","Checkbox","Delete","initialState","Todolist","dispatch","useDispatch","useEffect","then","res","tasks","data","items","type","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","removeTodolist","map","style","paddingTop","Button","addTodolistTC","v1","addTodolistAC","App","todolists","useSelector","state","thunk","action","removeTaskAC","removeTasksTC","item","addTasksTC","changeStatus","getState","find","startDate","priority","description","deadline","changeTaskStatusAC","console","warn","updateTasksStatusTC","newTitle","changeTaskTitleAC","updateTasksTitleTC","removeTodolistAC","changeTodolistTitleAC","updateTodolistTitleTC","addTodolist","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","newTasks","todoListId","todolistTasks","newTasksArray","copyState","forEach","addedDate","order","todolist","store","createStore","applyMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74354858.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'Access-Control-Allow-Origin': \"*\",\r\n        'API-KEY': '367b5061-81a8-4346-a38b-61dffe8fe508',\r\n        'Content-Type': 'application/json'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {TasksStateType} from '../App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistsAPI} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            const stateCopy = {...state}\r\n            let todolistTasks = stateCopy[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            stateCopy[action.todolistId] = newTasksArray;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const stateCopy = {...state}\r\n            let todolistTasks = stateCopy[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            stateCopy[action.todolistId] = newTasksArray;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId: taskId, title: title, todolistId: todolistId,}\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todolistId}\r\n}\r\n\r\n\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                dispatch(setTasksAC(tasks, todolistId))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const removeTasksTC = (id: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.deleteTask(todolistId, id)\r\n            .then(() => {\r\n                const action = removeTaskAC(id, todolistId);\r\n                dispatch(action);\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTasksTC = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.createTask(todolistId, title)\r\n            .then((res) => {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task);\r\n                dispatch(action);\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateTasksStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks;\r\n\r\n        const task = allTasksFromState[todolistId].find(t => t.id === taskId)\r\n\r\n        if (!task) {\r\n            console.warn('error, not found task in the state')\r\n            return\r\n        }\r\n        const model = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: status\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, model)\r\n            .then(() => {\r\n                const action = changeTaskStatusAC(taskId, status, todolistId)\r\n                dispatch(action);\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const updateTasksTitleTC = (taskId: string, title: string, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks;\r\n\r\n        const task = allTasksFromState[todolistId].find(t => t.id === taskId)\r\n\r\n        if (!task) {\r\n            console.warn('error, not found task in the state')\r\n            return\r\n        }\r\n        const model = {\r\n            title: title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, model)\r\n            .then(() => {\r\n                const action = changeTaskTitleAC(taskId, title, todolistId)\r\n                dispatch(action);\r\n            })\r\n\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    },[])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodolistsActionType\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all'\r\n            }))\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodolistsActionType => {\r\n    return {type: 'SET-TODOLISTS', todolists}\r\n}\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then(() => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.createTodolist(title)\r\n            .then(() => {\r\n                dispatch(addTodolistAC(title))\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(todolistId, title)\r\n            .then(() => {\r\n                dispatch(changeTodolistTitleAC(todolistId, title))\r\n            })\r\n    }\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, fetchTodolistsTC,\r\n    FilterValuesType, removeTodolistTC,\r\n    TodolistDomainType, updateTodolistTitleTC\r\n} from './state/todolists-reducer'\r\nimport {\r\n    addTasksTC,\r\n    removeTasksTC, updateTasksStatusTC, updateTasksTitleTC\r\n} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const thunk = removeTasksTC(id, todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const thunk = addTasksTC(todolistId, title);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string ) => {\r\n        const thunk = updateTasksStatusTC(id, status, todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        const thunk = updateTasksTitleTC(id, newTitle, todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const thunk = removeTodolistTC(id);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        const thunk = updateTodolistTitleTC(id, title);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}